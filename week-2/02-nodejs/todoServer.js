/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require("express");
const bodyParser = require("body-parser");
const fs = require("fs");
const { v4 } = require("uuid");

const app = express();

app.use(bodyParser.json());

app.get("/todos", (req, res) => {
  try {
    fs.readFile("./todos.json", "utf-8", (err, data) => {
      if (err) {
        res.status(400).json({
          error: "Error fetching todos",
        });
      } else {
        data = JSON.parse(data);
        res.status(200).json(data);
      }
    });
  } catch (error) {
    res.status(400).json({
      error: "Error fetching todos",
    });
  }
});

app.get("/todos/:id", (req, res) => {
  const id = req.params.id;
  try {
    fs.readFile("./todos.json", (err, data) => {
      if (err) {
        res.status(400).json({
          error: "Error fetching todo",
        });
      } else {
        const todos = JSON.parse(data);
        let todo;
        for (let i = 0; i < todos.length; i++) {
          if (todos[i]["id"] === parseInt(id)) {
            todo = todos[i];
            break;
          }
        }
        if (todo !== undefined) {
          res.status(200).json({
            todo,
          });
        } else {
          res.status(200).json({
            message: "Todo Does not exist",
          });
        }
      }
    });
  } catch (error) {
    res.status(400).json({
      error: "Error fetching todos",
    });
  }
});

app.post("/todos", (req, res) => {
  try {
    const body = req.body;
    const todoId = v4();
    fs.readFile("./todos.json", "utf-8", (err, data) => {
      if (err) {
        res.status(404).json({
          error: "An Error Occured while creating a todo",
        });
      } else {
        data = JSON.parse(data);
        body.id = todoId;
        data.push(body);
        const updatedData = JSON.stringify(data, null, 2);
        fs.writeFile("./todos.json", updatedData, (err) => {
          if (err) {
            res.status(500).json({
              error: err,
            });
          } else {
            res.status(201).json(todoId);
          }
        });
      }
    });
  } catch (error) {
    res.status(400).json({
      error: "An Error Occoured",
    });
  }
});

app.put("/todos/:id", (req, res) => {
  const todoId = req.params.id;
  try {
    const body = req.body;
    fs.readFile("./todos.json", "utf-8", (err, data) => {
      if (err) {
        res.status(404).json({
          error: "An Error Occured while creating a todo",
        });
      } else {
        const todos = JSON.parse(data);
        let todo;
        let idx;
        for (let i = 0; i < todos.length; i++) {
          if (todos[i]["id"] === todoId) {
            todo = todos[i];
            idx = i;
            break;
          }
        }
        if (todo === undefined) {
          res.status(404).json({
            message: "Todo Does not exist",
          });
        } else {
          todos.splice(idx, 1);
          if (body.title) todo.title = body.title;
          if (body.description) todo.description = body.description;
          if (body.completed !== undefined) todo.completed = body.completed;
          todos.push(todo);
          const updatedTodos = JSON.stringify(todos, null, 2);
          fs.writeFile("./todos.json", updatedTodos, (err) => {
            if (err) {
              res.status(500).json({
                error: err,
              });
            } else {
              res.status(200).json({
                message: "Todo updated Successfully",
              });
            }
          });
        }
      }
    });
  } catch (error) {
    res.status(404).json({
      error: "An Error Occoured",
    });
  }
});

app.delete("/todos/:id", (req, res) => {
  const todoId = req.params.id;
  try {
    fs.readFile("./todos.json", "utf-8", (err, data) => {
      if (err) {
        res.status(404).json({
          error: "An Error Occured while creating a todo",
        });
      } else {
        const todos = JSON.parse(data);
        let todo;
        let idx;
        for (let i = 0; i < todos.length; i++) {
          if (todos[i]["id"] === todoId) {
            todo = todos[i];
            idx = i;
            break;
          }
        }
        if (todo === undefined) {
          res.status(404).json({
            message: "Todo Does not exist",
          });
        } else {
          todos.splice(idx, 1);
          const updatedTodos = JSON.stringify(todos, null, 2);
          fs.writeFile("./todos.json", updatedTodos, (err) => {
            if (err) {
              res.status(400).json({
                error: err,
              });
            } else {
              res.status(200).json({
                message: "Todo Deleted Successfully",
              });
            }
          });
        }
      }
    });
  } catch (error) {
    res.status(404).json({
      error: "An Error Occoured while deleting a todo",
    });
  }
});

app.get("*", (req, res) => {
  res.sendStatus(404);
});

module.exports = app;
